{"version":3,"sources":["App.js","index.js"],"names":["TodoForm","_ref","input","addTodo","react_default","a","createElement","className","onSubmit","e","preventDefault","value","ref","node","placeholder","Todo","_ref2","todo","remove","text","onClick","id","TodoList","_ref3","todos","todoNode","map","App_Todo","key","Title","_ref4","todoCount","window","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","txt","data","hydrateStateWithLocalStorage","addEventListener","saveStateToLocalStorage","bind","removeEventListener","localStorage","hasOwnProperty","getItem","JSON","parse","setState","defineProperty","setItem","stringify","val","push","remainder","filter","App_Title","length","App_TodoForm","App_TodoList","handleRemove","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.36c20579.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst TodoForm = ({addTodo}) => {\n  // input tracker\n  let input;\n\n\n  return (\n    <div className=\"container\">\n      \n      <form onSubmit={(e) => {\n        e.preventDefault();\n        addTodo(input.value);\n        input.value = '';\n      }}>\n      <div className=\"input-group\">\n      <input \n      className=\"form-control col-sm-12 \" \n      ref={node => {\n        input = node;\n      }} \n      placeholder='Add task here...'\n      />\n      <button className=\"input-group-append btn-primary shadow-none\" \n      ><i className=\"fa fa-plus  text-white  \"></i></button>\n      </div>\n      <br />\n      </form>\n    </div>\n\n  );\n};\n\nconst Todo = ({todo, remove}) => {\n  // each todo\n  \n  return (<li className=\"list-group-item\" >\n      {todo.text} \n      <span className='fa fa-times removeBtn text-info' onClick={() => {(remove(todo.id))}}></span>\n    </li>);\n    \n}\n\nconst TodoList = ({todos, remove}) => {\n  //map through the todos\n  const todoNode = todos.map((todo) => {\n    return (<Todo todo={todo} key={todo.id} remove={remove}/>)\n  });\n  return (<ul className=\"list-group\">{todoNode}</ul>)\n}\n\n\nconst Title = ({todoCount}) => {\n  return (\n    <div>\n      <h1>Todo List</h1>\n      <p>number of tasks ({todoCount})</p>\n    </div>\n  );\n}\n\n\nwindow.id = 0;\n\n// App\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = { \n      txt: '',\n      data: []\n    }\n    \n  }\n  \n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n\n    // add event listener to save state to localStorage\n    // when user leaves/refreshes the page\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    // for all items in state\n    for (let key in this.state) {\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key);\n\n        // parse the localStorage string and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          // handle empty string\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n\n  // todo handler\n  addTodo(val) {\n    if(val !== '') {\n      // assemble data\n      const todo = {text: val, id: window.id++}\n      // update data\n      this.state.data.push(todo);\n      // update state\n      this.setState({\n        data: this.state.data\n      });\n      \n    }\n  }\n  \n  // handle remove f\n  handleRemove(id){\n    // filter all todos except the one to be removed\n    // eslint-disable-next-line\n    const remainder = this.state.data.filter((todo) => {\n      if(todo.id !== id) return todo;\n    });\n    // update state with filter\n    this.setState({\n      data: remainder\n    });\n  }\n  \n  \n\n  render() {\n    \n    return (\n        <div> \n            <Title todoCount={this.state.data.length}/>\n            <TodoForm addTodo={this.addTodo.bind(this)}/>\n            <TodoList\n              todos={this.state.data}\n              remove={this.handleRemove.bind(this)}\n              />\n              \n        </div>\n  )}\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root'));\n\n\n"],"sourceRoot":""}