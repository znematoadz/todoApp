{"version":3,"sources":["App.js","index.js"],"names":["TodoForm","_ref","input","addTodo","react_default","a","createElement","className","onSubmit","e","preventDefault","value","ref","node","placeholder","Todo","_ref2","todo","remove","toggleClass","addClass","id","onClick","text","TodoList","_ref3","todos","todoNode","map","App_Todo","key","Title","_ref4","todoCount","Footer","href","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","txt","classNames","data","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","localStorage","hasOwnProperty","getItem","JSON","parse","setState","defineProperty","setItem","stringify","val","Date","now","push","remainder","filter","document","getElementById","concat","undefined","classList","contains","add","App_Title","length","App_TodoForm","App_TodoList","handleRemove","handleToggleClass","App_Footer","React","Component","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.672a3256.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst TodoForm = ({addTodo}) => {\n  // input tracker\n  let input;\n\n\n  return (\n    <div className=\"container\">\n      \n      <form onSubmit={(e) => {\n        e.preventDefault();\n        addTodo(input.value);\n        input.value = '';\n      }}>\n      <div className=\"input-group\">\n      <input \n      className=\"form-control col-sm-12 \" \n      ref={node => {\n        input = node;\n      }} \n      placeholder='Add task here...'\n      />\n      <button className=\"input-group-append btn-primary shadow-none\" \n      ><i className=\"fa fa-plus  text-white  \"></i></button>\n      </div>\n      <br />\n      </form>\n    </div>\n\n  );\n};\n\nconst Todo = ({todo, remove, toggleClass}) => {\n  // each todo\n  //\n  return (<li className={todo.addClass} id={todo.id} onClick={() => {(toggleClass(todo.id))}}>\n      {todo.text} \n      <button className='fa fa-times removeBtn text-danger h-100 p-3 btn close' onClick={() => {(remove(todo.id))}}></button>\n    </li>);\n    \n}\n\nconst TodoList = ({todos, remove, toggleClass}) => {\n  //map through the todos\n  const todoNode = todos.map((todo) => {\n    return (<Todo todo={todo} key={todo.id} remove={remove} toggleClass={toggleClass}/>)\n  });\n  return (<ul className=\"list-group\">{todoNode}</ul>)\n}\n\n\nconst Title = ({todoCount}) => {\n  return (\n    <div>\n      <h1>Todo List</h1>\n      <p>number of tasks ({todoCount})</p>\n    </div>\n  );\n}\n\nconst Footer = () => {\n  return (\n    <div className=\"fixed-bottom bg-white\">\n      <p className=\"text-secondary  m-0  lead\">Created by Gerald Jones</p>\n        <a className=\" github-icon mb-5\" href=\"https://github.com/znematoadz/todoApp\">\n          <i className=\" fa fa-github text-secondary mb-3\"></i>\n        </a>\n    </div>\n  );\n}\n\n\n\n// App\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = { \n      txt: '',\n      classNames: 'list-group-item',\n      data: [],\n       \n    }\n    \n  }\n  \n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n\n    // add event listener to save state to localStorage\n    // when user leaves/refreshes the page\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    // for all items in state\n    for (let key in this.state) {\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key);\n\n        // parse the localStorage string and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          // handle empty string\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n\n  // todo handler\n  addTodo(val) {\n    if(val !== '') {\n      // assemble data\n      const todo = {text: val, addClass: 'list-group-item', id: window.id = Date.now()}\n      // update data\n      this.state.data.push(todo);\n      // update state\n      this.setState({\n        data: this.state.data\n      });\n      \n    }\n  }\n  \n  // handle remove \n  handleRemove(id){\n    // filter all todos except the one to be removed\n    // eslint-disable-next-line\n    const remainder = this.state.data.filter((todo) => {\n      if(todo.id !== id) return todo;\n    });\n    // update state with filter\n    this.setState({\n      data: remainder\n    });\n  }\n  \n  handleToggleClass(id){\n    // get list item by id \n    const addClass = document.getElementById(`${id}`);\n    // add class name to list item dynamically adding the check mark and and crossing out the text.   \n    if (addClass !== undefined) addClass.classList.contains('checked') ? addClass.classList.remove('checked') : addClass.classList.add('checked');\n      \n      // filtering through and adding class to filtered items state this saves className for reload. \n      // eslint-disable-next-line\n      this.state.data.filter((todo) => {\n        if(todo.id === id) return todo.addClass === \"list-group-item checked\" ? todo.addClass = \"list-group-item\" : todo.addClass = \"list-group-item checked\"\n      })\n    \n  }   \n  \n  render() {\n    \n    return (\n        \n        <div> \n            <Title todoCount={this.state.data.length}/>\n            <TodoForm addTodo={this.addTodo.bind(this)}/>\n            <TodoList\n              todos={this.state.data}\n              remove={this.handleRemove.bind(this)}\n              toggleClass={this.handleToggleClass.bind(this)}\n              />\n              <div className=\"col-sm-8 h-100\"><p className=\"invisible\">list bottom</p></div>          \n          <div>\n            <Footer/>\n          </div>\n        </div>\n  )}\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root'));\n\n\n"],"sourceRoot":""}